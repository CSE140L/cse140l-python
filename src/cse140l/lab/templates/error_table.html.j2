<style>
    /* UCSD-Inspired Color Palette */
    :root {
        --ucsd-blue-dark: #003865;
        --ucsd-blue-light: #B0E0E6;
        --status-error: #DC3545; /* Red (For failure highlights and borders) */
        --status-warning: #FFC107; /* Yellow (Retained for general accents if needed) */
        --ucsd-neutral-bg: #F0F8FF;
    }

    /* General Styling */
    h3 {
        color: var(--ucsd-blue-dark);
        border-bottom: 2px solid var(--ucsd-blue-light);
        padding-bottom: 5px;
        margin-top: 25px;
    }

    /* Scrollbox for the entire traceback content (outer container) */
    .traceback-scrollbox-outer {
        max-height: 800px;
        overflow-y: auto;
        padding: 10px;
        border: 2px solid var(--ucsd-blue-dark);
        border-radius: 8px;
        background-color: #FFFFFF;
    }

    /* Scrollbox for EACH individual table */
    .table-scroll-container {
        /* Define horizontal scrolling for wide tables */
        overflow-x: auto;
        margin-bottom: 20px;
        border: 1px solid var(--ucsd-blue-light);
        border-radius: 4px;
        /* Define vertical scrolling for long tables (optional, adjust height as needed) */
        max-height: 400px;
        overflow-y: auto;
    }

    /* Table Styling */
    table {
        /* Ensures the table doesn't wrap content if it's wider than the container */
        width: 100%;
        min-width: max-content;
        border-collapse: collapse;
        font-family: monospace;
        font-size: 0.85em;
    }
    th, td {
        border: 1px solid #CCCCCC;
        padding: 5px 8px;
        text-align: center;
        white-space: nowrap; /* Prevent signal names/values from wrapping */
    }
    th {
        background-color: var(--ucsd-blue-dark);
        color: white;
        text-transform: uppercase;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    /* Code styling for values */
    td code {
        padding: 0;
        background-color: transparent;
        color: var(--ucsd-blue-dark);
        /* Ensure code inside cells takes up all available space */
        display: block;
    }

    /* ------------------------------------------------ */
    /* HIGHLIGHTING STYLES */
    /* ------------------------------------------------ */

    /* Highlight the entire row that contains an error */
    .failing-row {
        /* Use a very light red background for the entire row */
        background-color: #F8D7DA;
        border-left: 5px solid var(--status-error);
    }

    /* Highlight the specific cell (entire <td>) with the error */
    .failing-cell {
        /* Solid Red background to clearly denote the failure */
        background-color: var(--status-error);
    }

    /* Style the text inside the failing cell (use white for contrast) */
    .failing-cell code {
        color: white;
        font-weight: bold;
    }
</style>

<div class="traceback-scrollbox-outer">
    <h2>Testbench Tracebacks</h2>

    {% for failed_test in failed_tests %}

        <h3>Failed Test Case: <code>{{ failed_test.name }}</code></h3>
        <p>
            All values are displayed in <strong>hexadecimal</strong>.
            Any wrong values are highlighted in red, where the format is <code>Expected/Found</code>.
        </p>

        <div class="table-scroll-container">
            <table>
                <tr>
                    {% for signal in failed_test.signals %}
                        <th><code>{{ signal }}</code></th>
                    {% endfor %}
                </tr>

                {% for step in failed_test.steps %}

                    {# Check if ANY value in the step contains the failure delimiter '/' #}
                    {% set row_failed = false %}
                    {% for value in step.values() %}
                        {% if "/" in value %}
                            {% set row_failed = true %}
                        {% endif %}
                    {% endfor %}

                    {# Apply the failing-row class to the <tr> element if the row failed #}
                    <tr class="{% if row_failed %}failing-row{% endif %}">
                        {% for value in step.values() %}

                            {% set is_failing = "/" in value %}

                            {# Apply the failing-cell class to the <td> element #}
                            <td class="{% if is_failing %}failing-cell{% endif %}">
                                <code>
                                {% if is_failing %}
                                    {# Handle Expected/Found split and formatting for failure case #}
                                    {% set expected, found = value.split('/') %}
                                    {{ expected.replace("0x", "") }}/{{ found.replace("0x", "") }}
                                {% else %}
                                    {# Standard value formatting #}
                                    {{ value.replace("0x", "") }}
                                {% endif %}
                                </code>
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </table>
        </div>
        {% endfor %}
</div>